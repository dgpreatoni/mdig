Notes on development setup (mostly for Joel's long term memory):

c:\mdig - is the test installation, the icons on the desktop probably
          originated from this install.
c:\mdig-dist - is for building a package to distribute using the nullsoft
          installer and scripts.
c:\OSGeo4W - is the development environment for building MDiG, Grass, and all
          the dependencies. The below instructions outline the process.

While hacking on mdig code:

For Python parts - run c:\OSGeo4W\OSGeo4W.bat, navigate on command line to c:\OSGeo4W\apps\mdig\mdig,
    run tests (nosetests -vs) or mdig.py

For compiling modules - run c:\OSGeo4W\apps\msys\msys.bat
    navigate on command line to c:\OSGeo4W\apps\mdig\grass-modules\,
    run "make MODULE_TOPDIR=/src/grass64_release install"

For testing modules in GRASS - 
    run c:\OSGeo4W\OSGeo4W.bat, 
    run grass: "grass64 -text",
    and then e.g. "r.mdig.kernel --help"

Need to make some c-module tests for nosetests. MDiG magically sets up the GRASS
environment from mdig.conf, so this should be possible... but the question is,
where does nosetests get it's details from? There is a mdig.conf in the test
directory so we need to check when this is used. Generally nosetests should be
using the osgeo4w directory for GRASS and MDiG's grass modules.

Using PivotalTracker to track tasks that need doing.
    

Windows build environment
=========================

1. Follow instructions from here:
http://trac.osgeo.org/grass/wiki/CompileOnWindows#CreatingaWinGRASSInstaller 
1a. BC, a dependency of MDiG, is installed by default for GRASS
1b. m4 and unistd.h from bison package were not extracted in favour of existing
newer versions from osgeo4w.
1c. One can edit ./mswindows/osgeo4w/package.sh to skip clean on first build,
    but should reenable it later.
2. Get the MDiG source code so that you can compile the r.mdig.* modules
2a. Install Bazaar from http://wiki.bazaar.canonical.com/WindowsDownloads
2b. Download the source from the repository at lp:mdig
2c. mkdir /usr/src && cd /usr/src && bzr branch lp:mdig
2cc. Run /osgeo4w/apps/msys/msys.bat to get environment for building mdig grass modules
2d. cd grass-modules && make MODULE_TOPDIR=/usr/src/grass-6.4.0RC6
2e. copy r.mdig.* from dist

==== These are for dropping in Python26 into osgeo4w ====
3. Install Python2.6 *for local user* to osgeo4w/apps/Python26, this ensures
python26.dll and other dlls (such as the win32api dll) are bundled as they stay
in the Python26 dir instead of in Windows/System32.
3a. Edit python.bat and grass.bat in osgeo4w/etc/ini to reflect new paths/exes.
Also add python26/Scripts to path
3b. download and install setuptools
3c. download and install things via easy_install:
easy_install python-dateutil ipython simplejson nose coverage mock pil
3e. Download and install matplotlib:
https://sourceforge.net/projects/matplotlib/files/matplotlib/matplotlib-1.0/matplotlib-1.0.0.win32-py2.6.exe/download
3f. Download and install numpy:
https://sourceforge.net/projects/numpy/files/NumPy/1.4.1/numpy-1.4.1-win32-superpack-python2.6.exe/download
3i. Download and install pywin32 
https://sourceforge.net/projects/pywin32/files/pywin32/Build%20214/pywin32-214.win32-py2.6.exe/download
copy site-packages/pywin32_system32/*.dll to osgeo4w/bin
3j. http://downloads.sourceforge.net/wxpython/wxPython2.8-win32-unicode-2.8.11.0-py26.exe
3k. install lxml package

===

5. Allow py files to run directly:
assoc .py=python.file
ftype python.file="C:\OSGeo4W\bin\python.exe" "%1" %~ 2 
6. change osgeo4w environ to run grass6.5, by changing these lines in
c:\osgeo4w\etc\ini\grass.bat:
set GISBASE=%OSGEO4W_ROOT%\apps\grass\grass-6.5.svn
set WINGISBASE=%OSGEO4W_ROOT%\apps\grass\grass-6.5.svn

Install scipy?
Gracefully fail when paste isn't installed

==== Possibly needed?
4. Add "\a \c bash" to the end of the line in the osgeo4w shell launcher that fires
up cmd.exe

=================================
Obsolete instructions:

--- unneeded --- Instead, compile switch in Makefile removes libgslcblas link ---
3. Get GSL from: http://sourceforge.net/projects/gnuwin32/files/ 
3a. Download gsl-1.8-lib.zip (in gsl/1.8 folder)
3b. Unzip to c:/osgeo4w
---

===== These are for 2.5 python ====
3. Proceed to download MDiG dependencies:
... Note, it might be easier to get setuptools first and use that (provides
        easy_install)
3a. http://www.imagemagick.org/script/binary-releases.php - install as normal
3b. configobj is now included in mdig.contrib 
3c. install lxml. get win32, py 2.5, exe from http://pypi.python.org/pypi/lxml/2.2.6
3c1. to run the installer you'll need msvcr71.dll - this is available from the
GRASS 6.5 SVN windows distribution extralibs dir, or in the Bazaar install dir
3c2. let windows registry know about python2.5 install from osgeo4w using script
from: http://effbot.org/zone/python-register.htm (also now in mdig utilities
dir)
3c3. run msys as administrator, then run:
$ python /osgeo4w/src/mdig/utilities/win_registry.py
3c4. run lxml installer as administrator.
3d. download python-dateutil from:
http://labix.org/download/python-dateutil/python-dateutil-1.5.tar.gz
extract dateutil to osgeo4w/apps/Python2.5/libs/site-packages/
3e. Download and install ipython:
python easy_install-2.5-script.py ipython
3e. Download and install matplotlib:
Get py2.5 version from:
http://www.lfd.uci.edu/~gohlke/pythonlibs/#matplotlib
=====================================

