#!/bin/sh
############################################################################
#
# MODULE:	r.mdig.survival
# AUTHOR(S):	Joel Pitt
# PURPOSE:	
#
#  Copyright 2004       Bioprotection Centre, Lincoln University
#  Copyright 2006, 2008 Joel Pitt, Fruition Technology
#
#  This file is part of Modular Dispersal In GIS.
#
#  Modular Dispersal In GIS is free software: you can redistribute it and/or
#  modify it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or (at your
#  option) any later version.
#
#  Modular Dispersal In GIS is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
#  Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with Modular Dispersal In GIS.  If not, see <http://www.gnu.org/licenses/>.
#
#############################################################################

#%Module
#% description: Use survival map to randomly decide whether a population survives or not
#%End
#%option
#% key: input
#% gisprompt: old,cell,raster
#% type: string
#% description: Raster map to filter
#% required : yes
#%end
#%option
#% key: output
#% gisprompt: cell,raster
#% type: string
#% description: Output raster map filtered
#% required : yes
#%end
#%option
#% key: survival
#% gisprompt: old,cell,raster
#% type: string
#% description: Survival percentage map (with values 0-100), or single value
#% required : yes
#%end
#%option
#% key: max
#% type: integer
#% description: Maximum amount of area that will be removed 
#% required: no
#% answer:  
#%end
#%option
#% key: seed
#% type: integer
#% description: Seed value for random number generator
#% required: no
#% answer:  
#%end
#%option
#% key: cats
#% type: string 
#% description: comma separated categories to experience chance mortality
#% required: no
#% answer:
#%end
#%option
#% key: statfile
#% type: string 
#% description: report the area evaluated AND the area that doesn't survive in the given file
#% required: no
#% answer:
#%end
#%flag
#% key: i
#% description: invert categories (cats option indicates non-affected cats)
#%end
#%flag
#% key: e
#% description: set max as amount of area to evaluate (not necessarily removed)
#%end
#%flag
#% key: o
#% description: overwrite output (does nothing, only for MDiG support)
#%end
#%flag
#% key: b
#% description: boolean (does nothing, only for MDiG support)
#%end

DEBUG=1
# BC_SCALE determines the precision of calculations made with BC
BC_SCALE=10
# Part of the script uses r.mask, so we should backup 
MASK_BACKUP_MAP=mdig.survival.mask

if test "$GISBASE" = ""; then
 echo "You must be in GRASS GIS to run this program." >&2
 exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi
     
eval `g.gisenv`
: ${GISBASE?} ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}
LOCATION="$GISDBASE/$LOCATION_NAME/$MAPSET"

# what to do in case of user break:
exitprocedure()
{
 echo "User break!"
 #shall we delete any TMP files?
 exit 1
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15

program=`basename $0`

#test:
if [ ! $GIS_OPT_INPUT ]
then
 echo "Please provide an input name" 1>&2
 exit 1
fi
if [ ! $GIS_OPT_OUTPUT ]
then
 echo "Please provide an output name" 1>&2
 exit 1
fi

if [ $DEBUG ]; then
    echo "Using seed value $GIS_OPT_seed"
fi
if [ ! $GIS_OPT_SEED ]
then
    if [ $DEBUG ]; then
         echo "Setting seed from date"
    fi
 GIS_OPT_SEED=`date +%s`
fi

#check if input file exists
#if test -f $LOCATION/cell/$GIS_OPT_input
if [ $DEBUG ]; then
     echo "Finding input"
fi
if [ -z "`g.findfile elem=cell file="$GIS_OPT_INPUT" | grep ^file | cut -f2 -d=`" ] ; then
    echo "<$GIS_OPT_INPUT> does not exist! Aborting." 1>&2
    exit 1
fi

#Check if survival parameter is a map or value
SURVIVAL_VALUE=0
if [ $GIS_OPT_SURVIVAL ]
then
    if [ $DEBUG ]; then
         echo "Finding survival map"
    fi
    if [ -z "`g.findfile elem=cell file="$GIS_OPT_SURVIVAL" | grep ^file | cut -f2 -d=`" ]
    then
        if [ ! $(echo "$GIS_OPT_SURVIVAL" | grep -E "^[0-9]+(\.[0-9]+)?$") ]
        then
            echo "$GIS_OPT_SURVIVAL is not a valid map or number for 'survival'." 1>&2
            exit 1
        else
        if ! [ $GIS_OPT_SURVIVAL -ge 0 ] || ! [ $GIS_OPT_SURVIVAL -le 100 ]
        then
            echo "$GIS_OPT_SURVIVAL is an invalid survival value. Range is [0-100]." 1>&2
            exit 1
        fi
        fi
        SURVIVAL_VALUE=1
    fi
fi

# make temp reclass map as mask
TEMP_RECLASS=mdig.survival
if [ $GIS_OPT_CATS ]
then
    if [ $DEBUG ]; then
         echo "Make reclass map"
    fi
  if [ $GIS_FLAG_I -eq 1 ]; then
      echo $GIS_OPT_CATS | awk -F"," '{for(i=1;i<=NF;i++) {split($i,parts,"-");\
              if ("2" in parts) { print parts[1],"thru",parts[2],"= NULL" } else { \
              print $i,"= NULL"}}} END { printf "* = *\nend\n" }' | \
              r.reclass input=$GIS_OPT_INPUT output=$TEMP_RECLASS
  else
      echo $GIS_OPT_CATS | awk -F"," '{for(i=1;i<=NF;i++) {split($i,parts,"-");\
              if ("2" in parts) { print parts[1],"thru",parts[2],"= 1" } else { \
              print $i,"= 1"}}} END { printf "* = NULL\nend\n" }' | \
              r.reclass input=$GIS_OPT_INPUT output=$TEMP_RECLASS
  fi
else
  # We need to copy the map, because later we may need to remember how it's
  # affected by any MASK that is present (is we need to use r.mask for stat creation).
  g.copy rast=$GIS_OPT_INPUT,$TEMP_RECLASS
fi

MAP_AREA_TEMP="0.0"
get_map_area() {
    MAP_AREA_TEMP=`r.stats -cni input=$1 | awk 'BEGIN {a=0} {a=a+$2} END {print a}'`
}

if [ -n "$GIS_OPT_MAX" ]
then
if [ $GIS_FLAG_E -eq 1 ]; then
# Alternative that finds sites to remove using r.random to select GIS_OPT_MAX points 
# but no guarantee that these are removed, they are evaluated to normal chance
    TEMP_RANDOM_SELECT=mdig.survival.randomselect
    TEMP_STDERR_OUT=mdig.survival.stderr
    eval `g.region -pg`
    # convert the maximum area into the number of points
    # WARNING: this won't be exact as surface area is dependent on geodetic datum
    # and projection... this is just a simple hack that should do for our purposes
    POINTS=`echo "scale = ${BC_SCALE}; $GIS_OPT_MAX / ($nsres * $ewres)" | bc`
    #if [ $SURVIVAL_VALUE -eq 1 -a \
    echo "Area of $GIS_OPT_MAX equals $POINTS points"

    r.random input=$TEMP_RECLASS raster_output=$TEMP_RANDOM_SELECT n=$POINTS \
                   --o 2> ${TEMP_STDERR_OUT}
    echo r.random input=$TEMP_RECLASS raster_output=$TEMP_RANDOM_SELECT n=$POINTS \
                   --o 2\> ${TEMP_STDERR_OUT}
    cat ${TEMP_STDERR_OUT}
    # Catch the case where there are less cells in raster than the max 
    # r.random is stupid and gives error instead of just selecting what's there
    if [ -n "`sed -ne "/There aren't \[.*\] non-NULL cells/p" ${TEMP_STDERR_OUT}`" ]; then
        # so we have to copy it manually
        g.copy rast=$TEMP_RECLASS,$TEMP_RANDOM_SELECT   
    fi
    if [ -n "$GIS_OPT_statfile" ]
    then
        # get the area of the map...
        get_map_area $TEMP_RANDOM_SELECT
        AREA_EVALUATED=$MAP_AREA_TEMP
    fi
    r.mapcalc "${TEMP_RANDOM_SELECT}=if(isnull(${TEMP_RANDOM_SELECT}),100,${GIS_OPT_SURVIVAL})"
    GIS_OPT_SURVIVAL=${TEMP_RANDOM_SELECT}
else
# Treat maximum as maximum area that is successfully removed, not just evaluated
    get_map_area $TEMP_RECLASS
    POP_AREA=$MAP_AREA_TEMP
    if [ -n "$GIS_OPT_statfile" ]
    then
        # get the area of the map...
        AREA_EVALUATED=$POP_AREA
    fi
    echo "total area of input map = ${POP_AREA}"
    if [ $POP_AREA -ne 0 ]; then
        if [ $SURVIVAL_VALUE -eq 1 -a \
            `echo "(1.0 - (${GIS_OPT_SURVIVAL}/100.0)) * ${POP_AREA} > $GIS_OPT_MAX" | bc` ]; then
            echo for single survival value
            GIS_OPT_SURVIVAL=`echo "scale = ${BC_SCALE}; 100 - (100.0 * ($GIS_OPT_MAX / $POP_AREA))" | bc`
            echo "NEW SURVIVAL CHANCE = $GIS_OPT_SURVIVAL"
        elif [ $SURVIVAL_VALUE -eq 0 ]; then 
            echo for survival maps
            # backup any mask that may be present
            g.rename rast=MASK,$MASK_BACKUP_MAP
            # mask with population
            r.mask $TEMP_RECLASS
            # get min/max/mean from r.univar in shell script mode
            eval `r.univar -g $GIS_OPT_SURVIVAL`
            # check whether mean x area is less than max
            echo "Pop area: $POP_AREA max: ${GIS_OPT_MAX}"
            echo "Before rescaling mean: $mean"
            if [ `echo "(1.0 - (${mean}/100.0)) * ${POP_AREA} > $GIS_OPT_MAX" | bc` ]; then
                # rescale doing linear transform of below and above mean
                NEW_MEAN=`echo "scale = ${BC_SCALE}; 100 - (100.0 * $GIS_OPT_MAX / $POP_AREA)" | bc`
                echo "NEW MEAN = $NEW_MEAN"
#TEMP_RESCALE_ABOVE=mdig.survival.newmean.above
                TEMP_RESCALE=mdig.survival.newmean
#r.rescale input=$GIS_OPT_SURVIVAL output=$TEMP_RESCALE_BELOW \
#from=$min,$mean to=$min,$NEW_MEAN --o
#r.rescale input=$GIS_OPT_SURVIVAL output=$TEMP_RESCALE_ABOVE \
#from=$mean,$max to=$NEW_MEAN,$max --o
#r.mapcalc $TEMP_RESCALE="if(isnull($TEMP_RESCALE_BELOW),$TEMP_RESCALE_ABOVE,$TEMP_RESCALE_BELOW)"
                r.mapcalc $TEMP_RESCALE="if(($GIS_OPT_SURVIVAL-$mean)+$NEW_MEAN "\
                                         "> 0, ($GIS_OPT_SURVIVAL-$mean)+$NEW_MEAN, 0)"
                GIS_OPT_SURVIVAL=$TEMP_RESCALE
#eval `r.univar -g $GIS_OPT_SURVIVAL`
#            echo "After rescaling mean: $mean"
            fi
            r.mask -r
            # restore any mask that may have been present
            r.mask $MASK_BACKUP_MAP
        fi
    fi # POP_AREA != 0
fi # GIS_FLAG_E 1 or 0
fi # GIS_OPT_MAX is defined

# NOTE: null values in category reclass map will mean that input is unchanged...
export GRASS_RND_SEED=$GIS_OPT_SEED
r.mapcalc "$GIS_OPT_OUTPUT=if(isnull($TEMP_RECLASS),$GIS_OPT_INPUT,if(rand(0,100)<$GIS_OPT_SURVIVAL,$GIS_OPT_INPUT,null()))"
unset GRASS_RND_SEED
#g.remove rast=$TEMP_FILE_NAME > /dev/null

# remove temp reclass if necessary
if [ $GIS_OPT_CATS ]; then
    if [ $DEBUG ]; then echo "Removing temp reclass map"; fi
    g.remove rast=$TEMP_RECLASS
    # -- begin stupid hack to deal with windows failing to remove reclassed_to file
    # first we use sed to remove the the map from the file
    buffer=`sed "/mdig\.survival@${MAPSET}/d" "$LOCATION/cell_misc/${GIS_OPT_INPUT}/reclassed_to"`
    # then we remove any empty lines, just to be sure
    buffer=`echo $buffer | sed "/$^/d"`
    if [ -z $buffer ]; then
        # if the buffer is now empty, delete the file!
        rm "$LOCATION/cell_misc/${GIS_OPT_INPUT}/reclassed_to"
    else
        # otherwise write the buffer
        echo $buffer > "$LOCATION/cell_misc/${GIS_OPT_INPUT}/reclassed_to"
    fi
    # --end stupid hack
fi

if [ $NEW_MEAN ]; then
    if [ $DEBUG ]; then echo "Removing temp newmean map"; fi
    g.remove rast=mdig.survival.newmean
fi

if [ $TEMP_RANDOM_SELECT ]; then
    if [ $DEBUG ]; then echo "Removing temp random select map"; fi
    g.remove rast=mdig.survival.randomselect
fi

if [ -n "$GIS_OPT_statfile" ]
then
    if [ $DEBUG ]; then echo "Writing area evaluated to $GIS_OPT_statfile"; fi
    echo "AREA_EVALUATED=$AREA_EVALUATED" > $GIS_OPT_statfile
fi


if [ $DEBUG ]; then echo "Done"; fi
