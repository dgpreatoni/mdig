#!/bin/sh
############################################################################
#
# MODULE:	r.mdig.survival
# AUTHOR(S):	Joel Pitt
# PURPOSE:	
#
#  Copyright 2004       Bioprotection Centre, Lincoln University
#  Copyright 2006, 2008 Joel Pitt, Fruition Technology
#
#  This file is part of Modular Dispersal In GIS.
#
#  Modular Dispersal In GIS is free software: you can redistribute it and/or
#  modify it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or (at your
#  option) any later version.
#
#  Modular Dispersal In GIS is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
#  Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with Modular Dispersal In GIS.  If not, see <http://www.gnu.org/licenses/>.
#
#############################################################################

#%Module
#% description: Use survival map to randomly decide whether a population survives or not
#%End
#%option
#% key: input
#% gisprompt: old,cell,raster
#% type: string
#% description: Raster map to filter
#% required : yes
#%end
#%option
#% key: output
#% gisprompt: cell,raster
#% type: string
#% description: Output raster map filtered
#% required : yes
#%end
#%option
#% key: survival
#% gisprompt: old,cell,raster
#% type: string
#% description: Survival percentage map (with values 0-100)
#% required : yes
#%end
#%option
#% key: seed
#% type: integer
#% description: Seed value for random number generator
#% required: no
#% answer:  
#%end
#%option
#% key: cats
#% type: string 
#% description: comma separated categories to experience chance mortality.
#% required: no
#% answer:
#%end
#%flag
#% key: i
#% description: invert categories (cats option indicates non-affected cats)
#%end
#%flag
#% key: o
#% description: overwrite output (does nothing, only for MDiG support)
#%end
#%flag
#% key: b
#% description: boolean (does nothing, only for MDiG support)
#%end


if test "$GISBASE" = ""; then
 echo "You must be in GRASS GIS to run this program." >&2
 exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi
     
eval `g.gisenv`
: ${GISBASE?} ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}
LOCATION=$GISDBASE/$LOCATION_NAME/$MAPSET

# what to do in case of user break:
exitprocedure()
{
 echo "User break!"
 #shall we delete any TMP files?
 exit 1
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15

program=`basename $0`

#test:
if [ ! $GIS_OPT_INPUT ]
then
 echo "Please provide an input name"
 exit 1
fi
if [ ! $GIS_OPT_OUTPUT ]
then
 echo "Please provide an output name"
 exit 1
fi

#echo "Using seed value $GIS_OPT_seed"
if [ ! $GIS_OPT_SEED ]
then
 echo "Setting seed from date"
 GIS_OPT_seed=`date +%s`
fi

#check if input file exists
#if test -f $LOCATION/cell/$GIS_OPT_input
if [ -z `g.findfile elem=cell file="$GIS_OPT_INPUT" | grep ^file | cut -f2 -d=` ] ; then
    echo "<$GIS_OPT_INPUT> does not exist! Aborting."
    exit 1
fi

TEMP_RECLASS=mdig.survival
# make temp reclass map as mask
if [ $GIS_OPT_CATS ]
then
# MASKCATS_CMD='awk -F\",\" \'{for(i=1;i<=NF;i++) {split(\$i,parts,\"-\"); if \
# (\"2\" in parts) { print parts[1],\"thru\",parts[2],\"= 1\" } else { \
#  print \$i,\"= 1\"}}} END { printf \"*\\nend\" }\''
#  echo $GIS_OPT_CATS | awk -F"," '{for(i=1;i<=NF;i++) {split($i,parts,"-");\
#	  if ("2" in parts) { print parts[1],"thru",parts[2],"= 1" } else { \
#	  print $i,"= 1"}}} END { printf "* = NULL\nend\n" }'
  if [ $GIS_FLAG_I -eq 1 ]; then
      echo $GIS_OPT_CATS | awk -F"," '{for(i=1;i<=NF;i++) {split($i,parts,"-");\
              if ("2" in parts) { print parts[1],"thru",parts[2],"= NULL" } else { \
              print $i,"= NULL"}}} END { printf "* = *\nend\n" }' | \
              r.reclass input=$GIS_OPT_INPUT output=$TEMP_RECLASS
  else
      echo $GIS_OPT_CATS | awk -F"," '{for(i=1;i<=NF;i++) {split($i,parts,"-");\
              if ("2" in parts) { print parts[1],"thru",parts[2],"= 1" } else { \
              print $i,"= 1"}}} END { printf "* = NULL\nend\n" }' | \
              r.reclass input=$GIS_OPT_INPUT output=$TEMP_RECLASS
  fi
fi

#TEMP_FILE_NAME=r.mdig.survival.temp
#echo GRASS_RND_SEED=$GIS_OPT_SEED
export GRASS_RND_SEED=$GIS_OPT_SEED
if [ $GIS_OPT_CATS ]
then
#echo r.mapcalc "$GIS_OPT_OUTPUT=if(isnull($TEMP_RECLASS),$GIS_OPT_INPUT,if(rand(0,100)<$GIS_OPT_SURVIVAL,$GIS_OPT_INPUT,null()))"
    r.mapcalc "$GIS_OPT_OUTPUT=if(isnull($TEMP_RECLASS),$GIS_OPT_INPUT,if(rand(0,100)<$GIS_OPT_SURVIVAL,$GIS_OPT_INPUT,null()))"
else
#    echo r.mapcalc "$GIS_OPT_OUTPUT=if(rand(0,100)<$GIS_OPT_SURVIVAL,$GIS_OPT_INPUT,null())"
    r.mapcalc "$GIS_OPT_OUTPUT=if(rand(0,100)<$GIS_OPT_SURVIVAL,$GIS_OPT_INPUT,null())"
fi
unset GRASS_RND_SEED
#g.remove rast=$TEMP_FILE_NAME > /dev/null

# remove temp reclass if necessary
if [ $GIS_OPT_CATS ]
then
g.remove rast=$TEMP_RECLASS
fi

#echo "Done."
