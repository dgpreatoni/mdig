#!/bin/sh
#
############################################################################
#
# MODULE:	r.mdig.filter.class
# AUTHOR(S):	Joel Pitt
# PURPOSE:	
#
# COPYRIGHT:	(C) 2001,2004,2005 by the GRASS Development Team
#
#		This program is free software under the GNU General Public
#		License (>=v2). Read the file COPYING that comes with GRASS
#		for details.
#
#############################################################################


#%Module
#% description: clip to max values for input where max is from filter map.
#%End
#%option
#% key: input
#% gisprompt: old,cell,raster
#% type: string
#% description: Raster map to filter
#% required : yes
#%end
#%option
#% key: output
#% gisprompt: cell,raster
#% type: string
#% description: Output raster map filtered
#% required : yes
#%end
#%option
#% key: filter
#% gisprompt: old,cell,raster
#% type: string
#% description: Filter map
#% required : yes
#%end
#%option
#% key: recode
#% type: string
#% description: file with population information for each class.
#% required : yes
#%end
#%flag
#% key: o
#% description: overwrite output (does nothing, only for r.dispersal support)
#%end

if test "$GISBASE" = ""; then
 echo "You must be in GRASS GIS to run this program." >&2
 exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi
     
eval `g.gisenv`
: ${GISBASE?} ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}
LOCATION=$GISDBASE/$LOCATION_NAME/$MAPSET

# what to do in case of user break:
exitprocedure()
{
 echo "User break!"
 #shall we delete any TMP files?
 exit 1
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15

program=`basename $0`

#test:
if [ ! $GIS_OPT_input ]
then
 echo "Please provide an input name"
 exit 1
fi
if [ ! $GIS_OPT_output ]
then
 echo "Please provide an output name"
 exit 1
fi

#check if input file exists
#if test -f $LOCATION/cell/$GIS_OPT_input
if [ -z `g.findfile elem=cell file="$GIS_OPT_input" | grep ^file | cut -f2 -d=` ] ; then
    echo "<$GIS_OPT_input> does not exist! Aborting."
    exit 1
fi

TEMP_FILE_NAME=r.mdig.filter.class.temp
#echo "Locating and filtering input values in NULL areas..."
r.recode input=$GIS_OPT_filter output=$TEMP_FILE_NAME < $GIS_OPT_recode
r.mdig.filter.maxpop input=$GIS_OPT_input output=$GIS_OPT_output filter=$TEMP_FILE_NAME
g.remove rast=$TEMP_FILE_NAME > /dev/null

#echo "Done."
